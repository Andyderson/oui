// # Tables
// We have a lot at our disposal for making very complex table constructs, e.g.:

%lego-table,
.lego-table {
  width: 100%;
  font-size: inherit;

  th,
  td {
    padding-left: spacer(1.5);
    padding-top: spacer(1);
    padding-bottom: spacer(1.5);

    &:first-child {
      padding-left: 0;
    }
  }

  thead {
    text-align: left;
  }

  th {
    text-transform: uppercase;
    font-weight: map-get($font-weight, normal);
    font-size: map-get($font-size, milli);
    color: map-get($font-color, muted);
  }

// ## Cell Alignments
// Defaults for cell alignments with one helper class for numbers.

//[hc]
//     <table class="table--rule">
//       <tbody>
//           <tr>
//               <td class="numerical">300</td>
//               <td>Lorem</td>
//           </tr>
//           <tr>
//               <td class="numerical">225</td>
//               <td>Foobar</td>
//           </tr>
//       </tbody>
//     </table>
//[/hc]

  [rowspan] {
    vertical-align: middle;
  }

  [rowspan="1"] {
    vertical-align: top;
  }

  [colspan] {
    text-align: center;
  }

  [colspan="1"] {
    text-align: left;
  }

  .numerical {
    text-align: right;
    padding-left: spacer(1.5);
  }


// ## Table Variations
// We're using direct decendent selectors so any child tables do not inherit styles.

  &--rule {
    th {
      padding-bottom: spacer(1);
    }

    tr {
      border-top: 1px solid map-get($ui-color, light);
    }

  }

  &--wall {
    th,
    td {
      border-left: 1px solid map-get($ui-color, light);
      padding-right: spacer(1);

      &:first-child {
        border-left: 0;
      }
    }
  }

  &--tight {
    th,
    td {
      padding-top: spacer(.5);
      padding-bottom: spacer(.5);
    }
  }
}
