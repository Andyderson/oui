// # Forms

// ## Text inputs
//
// Instead of a `[type]` selector for each kind of form input, we just use a
// class to target any/every one, e.g.:

// [c]
//      <input type="text" class="lego-text-input">
//      <input type="email" class="lego-text-input">
//      <input type="password" class="lego-text-input">
// [/c]

.lego-text-input,
.lego-textarea {
    width: 100%;
    border: 1px solid map-get($ui-color, base);
    border-radius: map-get($border-radius, base);
    padding: 7px;
    vertical-align: middle;
    line-height: 1.3;

    &:focus {
        border-color: $input-focus-border-color;
    }
}

.lego-textarea {
    resize: vertical;
}

.lego-form__header {
    margin-bottom: spacer(1);
}

.lego-form__footer {
    margin-top: spacer(3);
}

.lego-form-fields {
    @extend %kill-last-child-margin;
    list-style: none;
    margin: 0;
}

.lego-form-field__item {
    margin-bottom: spacer(1.5);
}

fieldset {
    margin-bottom: spacer(4);
}

// ## Form Field Titles
// Used if a larger title is needed and the usual `label` won't do or is not available.

.lego-form-field__title {
    font-size: map-get($font-size, epsilon);
    margin-bottom: spacer(.5);
}

//## Labels
//
// Define a `.label` class as well as a `<label>` element. This means we can apply
// label-like styling to meta-labels for groups of options where a `<label>`
// element is not suitable.

.lego-label {
    display: block;
    margin-bottom: spacer(.5);
    font-weight: map-get($font-weight, normal);
}


//  Groups of checkboxes and radios.

.lego-input-list {
    list-style: none;
    margin: 0;

    > li {
        display: table;
        margin-bottom: spacer(1);
    }

    input {
        display: table-cell;
    }
}

// Labels in lego-input-lists
.lego-check-label,
.lego-input-list .lego-label {
    display: table-cell;
    padding-left: spacer(1);
    font-weight: map-get($font-weight, normal);
}

.lego-input--disabled {
    background-color: map-get($background-color, light);
}

.lego-or {
    text-align: center;
    color: map-get($font-color, base);
    text-transform: uppercase;
    margin: spacer(1.5) auto;
    position: relative;

    &:before,
    &:after {
        content: "";
        border-top: 1px dotted map-get($ui-color, base);
        width: 40%;
        position: absolute;
        left: 0;
        top: 50%;
    }

    &:after {
        left: auto;
        right: 0;
    }
} // .or


// ## Form Errors

.lego-form-error {
    .lego-label {
        color: map-get($font-color, error);
    }

    [type=text],
    [type=password] {
        border-color: map-get($ui-color, error);
    }
}


.lego-form-note {
    padding-top: spacer(.5);
    font-size: map-get($font-size, micro);
}

.lego-form-note--error {
    color: map-get($font-color, error);
}